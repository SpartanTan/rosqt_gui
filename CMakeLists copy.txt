cmake_minimum_required(VERSION 2.8.3)
project(rosQT_gui)
add_definitions(-std=c++11)


# set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pthread")
# set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTORCC ON)

SET(CMAKE_BUILD_TYPE Release)

## System dependencies are found with CMake's conventions
# find_package(Boost REQUIRED COMPONENTS system)
find_package(catkin REQUIRED COMPONENTS
    roscpp
    std_msgs
)

find_package(Qt5 REQUIRED COMPONENTS
    Gui
    Core
    Widgets
    PrintSupport
    #SerialPort
    #WebSockets
    #Sql
    #OpenGL
    #PATHS /opt/Qt5.12.6/5.12.6/gcc_64/lib/cmake/Qt5/   # choose the qt you want to use
)

qt5_wrap_ui(UIC mainwindow.ui)

catkin_package(
    # INCLUDE_DIRS include
    CATKIN_DEPENDS #roscpp rosbag std_msgs sensor_msgs geometry_msgs nav_msgs pcl_ros pcl_conversions tf cv_bridge image_transport
)

message(${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}_autogen)
message(${PROJECT_BINARY_DIR})
message(${PROJECT_SOURCE_DIR})
include_directories(
    INCLUDE_DIRS include
    ${CMAKE_CURRENT_BINARY_DIR}   ## important! find moc hpp(generated by ui)
    ${catkin_INCLUDE_DIRS}
)

add_executable(${PROJECT_NAME}
    src/main.cpp
    src/mainwindow.cpp
    # include/rosQT_gui/mainwindow.h
    src/mainwindow.ui
) 

add_dependencies(${PROJECT_NAME}
    ${${PROJECT_NAME}_EXPORTED_TARGETS}
    ${catkin_EXPORTED_TARGETS}
)

target_link_libraries(${PROJECT_NAME}
    ${catkin_LIBRARIES}
    Qt5::Core Qt5::Widgets Qt5::Gui Qt5::PrintSupport
    #Qt5::SerialPort Qt5::WebSockets Qt5::Sql Qt5::OpenGL
)
